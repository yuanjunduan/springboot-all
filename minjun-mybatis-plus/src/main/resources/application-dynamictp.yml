dynamictp:
  enabled: true                               # 是否启用 dynamictp，默认true
  enabledCollect: true                        # 是否开启监控指标采集，默认true
  collectorTypes: micrometer,logging          # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer
  logPath: /home/logs/dynamictp/user-center/  # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置
  monitorInterval: 10                          # 监控时间间隔（报警检测、指标采集），默认5s

  # 告警渠道
  platforms:                                  # 通知报警平台配置
    - platform: wechat
      urlKey: a2209d8e-7a71-4e88-864e-8a9e7c476a18   # webhook 中的 key
      receivers:                # 接受人企微账号

    - platform: email
      receivers: duanyj@sdses.com  # 收件人邮箱，多个用逗号隔开

  tomcatTp: # tomcat webserver 线程池配置
    corePoolSize: 10
    maximumPoolSize: 400
    keepAliveTime: 60
    threadPoolName: tpTomcat
    threadPoolAliasName: tpTomcatAliasName
    threadNamePrefix: tpTomcatPrefix

  undertowTp: # undertow web server线程池配置
    corePoolSize: 100
    maximumPoolSize: 400
    keepAliveTime: 60

  okhttp3Tp: # okhttp3 线程池配置
    - threadPoolName: okHttpClientTp
      threadPoolAliasName: okHttpTpAliasName
      threadNamePrefix: okHttpTpPrefix
      corePoolSize: 100
      maximumPoolSize: 200
      keepAliveTime: 60
      runTimeout: 200
      queueTimeout: 100
  # 全局配置
  globalExecutorProps:                        # 线程池配置 > 全局配置 > 字段默认值
    rejectedHandlerType: CallerRunsPolicy
    queueType: VariableLinkedBlockingQueue
    waitForTasksToCompleteOnShutdown: true
    awaitTerminationSeconds: 3
    taskWrapperNames: ["swTrace", "ttl", "mdc"]
    queueTimeout: 300
    runTimeout: 300
    notifyItems:                     # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警）
      - type: change                 # 线程池核心参数变更通知
        silencePeriod: 120           # 通知静默时间（单位：s），默认值1，0表示不静默

      - type: capacity               # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类
        threshold: 80                # 报警阈值，意思是队列使用率达到70%告警；默认值=70
        count: 2                     # 在一个统计周期内，如果触发阈值的数量达到 count，则触发报警；默认值=1
        period: 30                   # 报警统计周期（单位：s），默认值=120
        silencePeriod: 0             # 报警静默时间（单位：s），0表示不静默，默认值=120

      - type: liveness               # 线程池活性
        threshold: 80                # 报警阈值，意思是活性达到70%告警；默认值=70
        count: 3                     # 在一个统计周期内，如果触发阈值的数量达到 count，则触发报警；默认值=1
        period: 30                   # 报警统计周期（单位：s），默认值=120
        silencePeriod: 0             # 报警静默时间（单位：s），0表示不静默；默认值=120

      - type: reject                 # 触发任务拒绝告警
        count: 1                     # 在一个统计周期内，如果触发拒绝策略次数达到 count，则触发报警；默认值=1
        period: 30                   # 报警统计周期（单位：s），默认值=120
        silencePeriod: 0             # 报警静默时间（单位：s），0表示不静默；默认值=120

      - type: run_timeout            # 任务执行超时告警
        count: 20                    # 在一个统计周期内，如果执行超时次数达到 count，则触发报警；默认值=10
        period: 30                   # 报警统计周期（单位：s），默认值=120
        silencePeriod: 30            # 报警静默时间（单位：s），0表示不静默；默认值=120

      - type: queue_timeout          # 任务排队超时告警
        count: 5                     # 在一个统计周期内，如果排队超时次数达到 count，则触发报警；默认值=10
        period: 30                   # 报警统计周期（单位：s），默认值=120
        silencePeriod: 0             # 报警静默时间（单位：s），0表示不静默；默认值=120
  #
  # 线程池配置
  executors:                               # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量
    - threadPoolName: dtpExecutor1         # 线程池名称，必填
      threadPoolAliasName: 测试线程池        # 线程池别名，可选
      #  线程池模式
      #  common 模式：对应线程池 DtpExecutor，DtpExecutor 是该框架的核心顶层设计类，其他类都继承自该类，common 模式是默认的线程池模式，适用于 cpu 密集型场景，当核心线程数满了优先放入队列等待
      #  eager 模式：对应线程池 EagerDtpExecutor，eager 模式适用于 IO 密集型场景，在线程池没达到设置的最大值之前优先创建新线程执行任务而不是放入队列等待，比如 tomcat 线程池、dubbo 线程池都是采用这种模式
      #  ordered 模式：对应线程池 OrderedDtpExecutor，适用于需要保证任务有序执行的场景，比如消费消息队列消息，需保证同一 uid 的消息按序消费
      #  priority 模式：对应线程池 PriorityDtpExecutor，适用于需要根据任务优先级执行的场景，比如优先级高的任务先执行
      #  scheduled 模式：对应线程池 ScheduledDtpExecutor，适用于定时任务场景
      executorType: common                 # 线程池类型 common、eager、ordered、scheduled、priority，默认 common
      corePoolSize: 6                      # 核心线程数，默认1
      maximumPoolSize: 8                   # 最大线程数，默认cpu核数
      queueCapacity: 10                  # 队列容量，默认1024
      queueType: VariableLinkedBlockingQueue         # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue
      rejectedHandlerType: CallerRunsPolicy          # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy
      keepAliveTime: 60                              # 空闲线程等待超时时间，默认60
      threadNamePrefix: min-jun-dtpExecutor1         # 线程名前缀，默认dtp  这个是日志中的[ %thread ]
      allowCoreThreadTimeOut: false                  # 是否允许核心线程池超时，默认false
      waitForTasksToCompleteOnShutdown: true         # 参考spring线程池设计，优雅关闭线程池，默认true
      awaitTerminationSeconds: 5                     # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s）
      preStartAllCoreThreads: false                  # 是否预热所有核心线程，默认false
      runTimeout: 310                                # 任务执行超时阈值，单位（ms），默认0（不统计）
      queueTimeout: 100                              # 任务在队列等待超时阈值，单位（ms），默认0（不统计）
      tryInterrupt: false                            # 执行超时后是否中断线程，默认false
      taskWrapperNames: ["ttl", "mdc"]               # 任务包装器名称，继承TaskWrapper接口
      notifyEnabled: true                            # 是否开启报警，默认true
      # platformIds: [1,2]                             # 报警平台id，不配置默认拿上层platforms配置的所有平台

